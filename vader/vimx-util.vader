Execute perl (setup):
  use strict;
  use warnings;
  use VIMx;
  use VIMx::Util;

Before:
  unlet! b:eep b:eep2 b:oop b:dict

Execute perl (has_patch):
  $b{eep} = vim_has_patch('7.4.100')

Then (has_patch):
  Assert b:eep

Execute perl (!has_patch):
  $b{eep} = vim_has_patch('19.0.100')

Then (!has_patch):
  Assert !b:eep

Execute perl (has_feature):
  $b{eep} = vim_has_feature('perl')

Then (has_feature):
  Assert b:eep

Execute perl (!has_feature):
  $b{eep} = vim_has_feature('dionsaurs')

Then (!has_feature):
  Assert !b:eep

Execute perl (vim_do):
  vim_do("let b:eep = 'eeeyup!'")

Then (vim_do):
  AssertEqual b:eep, 'eeeyup!'

Execute perl (vim_eval - scalar):
  $b{eep} = vim_eval(1)

Then (vim_eval - scalar):
  AssertEqual b:eep, 1

Execute perl (vim_eval - function):
  $b{eep} = vim_eval("[ 1, 2 ]")

Then (vim_eval - function):
  AssertEqual b:eep, [ 1, 2 ]

Execute perl (vim_typeof - number):
  $b{oop} = vim_typeof(1)

Then (vim_typeof - number):
  AssertEqual b:oop, 'number'

Execute perl (vim_typeof - string):
  $b{oop} = vim_typeof("'hiya'")

Then (vim_typeof - string):
  AssertEqual b:oop, 'string'

Execute perl (vim_typeof - dict):
  $b{oop} = vim_typeof("{'one': 1}")

Then (vim_typeof - dict):
  AssertEqual b:oop, 'dict'

Execute perl (vim_typeof - list):
  $b{oop} = vim_typeof("[1, 2, 3]")

Then (vim_typeof - list):
  AssertEqual b:oop, 'list'

Execute perl (vim_has):
  $b{eep} = vim_has('autocmd')

Then (vim_has):
  AssertEqual b:eep, 1

Execute perl (vim_has - not):
  $b{eep} = vim_has('ponies')

Then (vim_has - not):
  AssertEqual b:eep, 0

" Execute (vim_escape):
"   " perl let $b{eep} = \( "'"vim_escape("one two 'three 'four'' five") )
"   perl VIM::DoCommand(q{let b:eep = '} . vim_escape("one two 'three 'four'' five") . q{'})
"   AssertEqual b:eep, "one two 'three 'four'' five"
